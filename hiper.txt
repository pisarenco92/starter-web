<< Getting Started with Git for the Windows Developer (Part I) | Getting Started with Git for the Windows Developer (Part II) - Get Acquainted with Bash >>
Basic Git Command Line Reference for Windows Users
Posted on ???????? 8 2012 09:22 by John Atten in CodeProject, Education, Git   ||   ??????????? (0)
gitWhile there are GUI interfaces available for GIT (some good, some bad), familiarity with at least the basics of git’s command line interface can only enhance your ability to use the tool to maximum effectiveness. Since I am relatively new to git and version control in general, I set out to learn the basics of the git command line. In doing so, I found it handy to keep a list of the commonly-used commands nearby so that I didn’t have to keep Googling.

In this post, I am going to cover the very basic set of commands one might require to effectively navigate and maintain your source repo using only the git Bash command line interface. Probably, in creating this post, I will not need to look at this again, as the sheer fact of composing this list and explaining it all will burn these into my brain forever. On the other hand, if I am ever unsure, I will now have a place to come look!

NOTE: The references here are by no means comprehensive. I have included the basic commands required to get started, and the commonly used options for each command. There is a wealth of additional information available on the internet, and I have included some helpful reference links at the end of this post.

To more easily find what you might be looking for, here are some links to specific sections of this post:

Working with the file system
Navigating the file system with the Bash Command Line
Show directory contents with the Bash Command Line
Create a new directory with the Bash Command Line
Create files with the Bash Command Line
Remove files with the Bash Command Line
Remove directories with the Bash Command Line
Configuring Git and Creating a Repository:
Configure Git
Initialize a new repository
Staging and Committing Changes
Add/Stage files for commit
Unstage files for commit
Committing Changes
Working with Remote Repositories (like Github)
Working with remote repositories
Working with branches
Merging Branches
Pushing changes to remote repositories
Fetching changes from remote repositories
Pulling Changes from remote repositories
Undoing Changes and Working With Tags
Undo changes in the working directory
Working with Tags
 

Git Bash: Syntax Notes
Directory Paths
First off, note that Git Bash is a *nix application (Unix/Linux), and expects inputs according to *nix conventions when it comes to file system navigation. This is important when using Git on a windows system, because we need to mentally map the familiar Windows directory notation to Unix format:

Windows Directory Path	<---- Becomes ----->	*nix Directory Path
C:\Users\MyUserFolder\	 	/c/Users/MyUserFolder/
 

Strings with Spaces
When we are going to provide an input string with no spaces, we need do nothing. However, strings which contain spaces must be enclosed in quotes. Remember this. Personally, I just use quotes around strings in general.

The “Home” Directory
The file system in *nix systems is set up a little differently than in Windows. Git Bash assumes the existence of a “home” directory for each user. In Windows, the default is your personal user folder. This folder is where Git Bash opens by default. Typing only cd after the command prompt will always return you to the root level of the home directory.

Command Syntax Format:
The basic command syntax for a git Bash Command is:

$ CommandName [options] [directory]
In the above, the square brackets denote optional parts of the command. The square brackets themselves are not typed into the command line. Items following a command which are not enclosed in brackets are required.

Cases and Spaces Count
Also note that git Bash is case-sensitive, and spaces count. For Example, the common command to change to another directory is cd. This is NOT the same as CD or Cd.

Optional Input

When portions of a command are optional, we will note this by enclosing them in square braces:

$ Command [options]
In the above, we do type the square brackets.

User Input
For our purposes here, when we are presenting command syntax examples, we will denote user-provided values between angle brackets:

$ Command [options] <SomeUserInput>
 
In the above, we do type either the square or angle brackets.

 


Git Bash: Navigating the File System (cd)
Syntax:
cd [options] [<directory>]

 

Navigate to the Home Directory (Default folder for the current user):
$ cd
 

Navigate to a specific folder in the file system:
$ cd /c/SomeFolder/SomeOtherFolder/
 

Navigate to a specific folder in the file system (if there are spaces in the directory path):
$ cd “/c/Some Folder/Some Other Folder/”
 
Go back to the previous Location:
$ cd -
 
Move Up One Directory Level:
$ cd ..
In the above, the cd command is followed by a space, then two period with no space between.

 


Git Bash: Show Directory Contents (ls)
Syntax:
ls [options]

Options:
-1 = List 1 item per line
-r = Reverse the sort order
-a  = Show Everything, including hidden items
-d = list only directories
-l = (letter L, lowercase) = Use a long listing format (more info per item, arranged in columns, vertical listing)
 

List the contents of the current directory (folder):
$ ls
The above will display the contents of the current directory as a horizontal list. Not real convenient.

List the contents of the current directory, one item per line:
$ ls -1
That’s better. Note, however, that we can only differentiate files from subdirectories based upon the file extension.

List only the subdirectories (folders) within the current directory:
$ ls –d */
 

List everything in long form, vertically:
$ ls –al
The above gives a swath of information. Also, subdirectories are differentiated by the first column (begin with drwxr instead of -rw)

List all contents, including subdirectory contents, single item per line:
$ ls -1 *
 


Git Bash: Create a New Directory (mkdir)
Syntax:
mkdir [options] <folderName>

Options:
-p = Create parent directories as needed
--verbose = Show a message for each new directory created (note the double dash)
 

Create a folder in the current directory (without spaces in the folder name):
$ mkdir NewFolderName
 

Create a folder in the current directory (with spaces in the folder name):
$ mkdir “New Folder Name”
 

Create a folder at the specific directory path:
$ mkdir /c/ExistingParentFolder/NewFolderName
 

Create a folder at the specific directory path, and create parent directories as needed:
$ mkdir -p /c/NewParentFolder/NewFolderName
 

Create a folder at the specific directory path, create parent directories as needed, and print a description of what was done in the console window:
$ mkdir -p --verbose /c/NewParentFolder/NewFolderName
 


Git Bash: Create Files (touch, echo)
Syntax:
touch [options] <FileName>

echo [options] TextString > FileName

(NOTE: FileName can include directory. Default is the current directory).

Create a single (empty) text file in the current directory:
$ touch newFile.txt
 

Create a single (empty) text file in the specified directory:
$ touch /c/SomeFolder/newFile.txt
 

Create multiple (empty) text files in the current directory:
$ touch newFile_1.txt newFile_2 . . . newFile_n
 

Append text to a file. If the file does not exist, one is created:
$ echo “This text is added to the end of the file” >> newFile.txt
 

Overwrites text in a file. If the file does not exist, one is created:
$ echo “This text replaces existing text in the file” > newFile.txt
 

Overwrites text in a file at the specified location. If the file does not exist, one is created:
$ echo “This text replaces existing text in the file” > /c/SomeFolder/newFile.txt
 


Git Bash: Re